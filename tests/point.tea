construct Point {
    static count = 0

    new(x, y) => {
        Point.count += 1
        if y == undefined {
            [#x, #y] = [x.x, x.y]
        }
        else {
            [#x, #y] = [x, y]
        }
    }

    #test() => #x ** #y

    get x() => #x
    get y() => #y
    get mag() => (#x ** 2 + #y ** 2) ** 0.5

    add(point) => Point(point.x + #x, point.y + #y)

    toString() => "Point(${#x}, ${#y})"

    normalize() => Point(#x / #mag, #y / #mag)

    taxicab(dest) => {
        for x in #x + 1...dest.x + 1 {
            yield Point(x, #y)
        }
        for y in #y + 1...dest.y + 1 {
            yield Point(dest.x, y)
        }
        // yield Point(dest)
    }

    print() => console.log(#toString())
    #printWat() => console.log(#test())
}

let a = Point(1, 2)
let b = Point(3, 4)

console.log(a.taxicab)

// for p in a.taxicab(b) {
//     p.print()
//     p.printWat()
// }
